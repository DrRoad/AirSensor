% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pat_createAirSensor.R
\name{pat_createAirSensor}
\alias{pat_createAirSensor}
\title{Create an Air Sensor object}
\usage{
pat_createAirSensor(pat = NULL, parameter = "pm25", FUN = NULL, ...)
}
\arguments{
\item{pat}{PurpleAir Timeseries \emph{pat} object.}

\item{parameter}{Parameter for which to create an univariate \emph{airsensor} 
object. See details.}

\item{FUN}{Algorithm applied to \emph{pat} object for hourly aggregation and 
quality control. See details.}

\item{...}{(optional) Additional parameters passed into \code{FUN}.}
}
\value{
An "airsensor" object of aggregated PurpleAir Timeseries data.
}
\description{
Converts data from a \emph{pat} object with an irregular time 
axis to an \emph{airsensor} object where the numeric data has been aggregated 
along a standardized hourly time axis, as well as adding additional required 
metadata for compatibility with the *PWFSLSmoke* package.
}
\details{
\code{FUN} allows users to provide custom aggregation and 
quality-control functions that are used to create an \emph{airsensor} object. 
The \code{FUN} must accept a \emph{pat} object as the first argument and 
return a \emph{pat} object with a regular hourly datetime axis. \code{FUN} 
can access and utilize any component of a standard \emph{pat} object 
(e.g pm25_A, temperature, etc.) as well as define new variables in the 
\emph{pat} data. See examples. 

\code{parameter} allows user to select which variable to use for the 
univariate \emph{airsensor} object (e.g 'pm25_A', 'humidity', etc.). 
Furthermore the \code{parameter} can be a new variable created via \code{FUN} 
evaluation. See examples.

\code{...} Additional optional parameters or data that a user may implement 
support for in the \code{FUN}.
}
\examples{
# Default FUN
sensor <- pat_createAirSensor(example_pat)

# Package included aggregation/QC FUN
sensor <- pat_createAirSensor(
  example_pat, 
  parameter = 'pm25', 
  FUN = AirSensor::PurpleAirQC_hourly_AB_02
)

# Custom FUN
add_jitter <- function(pat, y) {
  # Create custom_pm variable 
  pat$data$custom_pm <- pat$data$pm25_A + y
  # Default hourly aggregation
  pat <- pat_aggregate(pat)
  return(pat)
} 
# Create noise
jitter <- rnorm(n = nrow(example_pat$data))

# Evaluate custom FUN with parameters 
sensor <- pat_createAirSensor(example_pat, parameter = 'custom_pm', FUN = add_jitter, y = jitter)
}
\seealso{
\link{PurpleAirQC_hourly_AB_02}

\link{pat_aggregate}
}
